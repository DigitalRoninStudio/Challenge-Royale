//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/HexChess/Input/PlayerInGameController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInGameController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInGameController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInGameController"",
    ""maps"": [
        {
            ""name"": ""BasicState"",
            ""id"": ""10e39758-1699-4dea-89eb-c92a90cc5ab6"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""051d5480-73c2-43e2-92fd-a3a0bcdd9f06"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnSelectEntity"",
                    ""type"": ""Button"",
                    ""id"": ""51fe964b-1900-4e2f-a15b-4c8bf5197533"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a92a30a-c7b1-43d8-a70d-8fee28c6ea7f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""760e4f3f-565d-4e38-9ff6-0517ba972d04"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnSelectEntity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EntitySelectedState"",
            ""id"": ""4503aceb-6e42-46d1-816f-a35406bcdf7f"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""db4a084e-a524-4756-b9ba-53277e218ba9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnSelectEntity"",
                    ""type"": ""Button"",
                    ""id"": ""39289e12-57c6-45a4-ad4e-835865bc404d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnDeselectEntity"",
                    ""type"": ""Button"",
                    ""id"": ""e57e2186-6851-4e3e-b99b-33c8ea115dd8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb57422e-ff1d-4ef8-be91-950bab28d6b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnSelectEntity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00734302-b6e6-4b7a-b6b6-be5b5ebe277e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48dfa683-9292-487a-be38-45653639c2fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnDeselectEntity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicState
        m_BasicState = asset.FindActionMap("BasicState", throwIfNotFound: true);
        m_BasicState_ScreenPosition = m_BasicState.FindAction("ScreenPosition", throwIfNotFound: true);
        m_BasicState_OnSelectEntity = m_BasicState.FindAction("OnSelectEntity", throwIfNotFound: true);
        // EntitySelectedState
        m_EntitySelectedState = asset.FindActionMap("EntitySelectedState", throwIfNotFound: true);
        m_EntitySelectedState_ScreenPosition = m_EntitySelectedState.FindAction("ScreenPosition", throwIfNotFound: true);
        m_EntitySelectedState_OnSelectEntity = m_EntitySelectedState.FindAction("OnSelectEntity", throwIfNotFound: true);
        m_EntitySelectedState_OnDeselectEntity = m_EntitySelectedState.FindAction("OnDeselectEntity", throwIfNotFound: true);
    }

    ~@PlayerInGameController()
    {
        Debug.Assert(!m_BasicState.enabled, "This will cause a leak and performance issues, PlayerInGameController.BasicState.Disable() has not been called.");
        Debug.Assert(!m_EntitySelectedState.enabled, "This will cause a leak and performance issues, PlayerInGameController.EntitySelectedState.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicState
    private readonly InputActionMap m_BasicState;
    private List<IBasicStateActions> m_BasicStateActionsCallbackInterfaces = new List<IBasicStateActions>();
    private readonly InputAction m_BasicState_ScreenPosition;
    private readonly InputAction m_BasicState_OnSelectEntity;
    public struct BasicStateActions
    {
        private @PlayerInGameController m_Wrapper;
        public BasicStateActions(@PlayerInGameController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_BasicState_ScreenPosition;
        public InputAction @OnSelectEntity => m_Wrapper.m_BasicState_OnSelectEntity;
        public InputActionMap Get() { return m_Wrapper.m_BasicState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicStateActions set) { return set.Get(); }
        public void AddCallbacks(IBasicStateActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicStateActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
            @OnSelectEntity.started += instance.OnOnSelectEntity;
            @OnSelectEntity.performed += instance.OnOnSelectEntity;
            @OnSelectEntity.canceled += instance.OnOnSelectEntity;
        }

        private void UnregisterCallbacks(IBasicStateActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
            @OnSelectEntity.started -= instance.OnOnSelectEntity;
            @OnSelectEntity.performed -= instance.OnOnSelectEntity;
            @OnSelectEntity.canceled -= instance.OnOnSelectEntity;
        }

        public void RemoveCallbacks(IBasicStateActions instance)
        {
            if (m_Wrapper.m_BasicStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicStateActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicStateActions @BasicState => new BasicStateActions(this);

    // EntitySelectedState
    private readonly InputActionMap m_EntitySelectedState;
    private List<IEntitySelectedStateActions> m_EntitySelectedStateActionsCallbackInterfaces = new List<IEntitySelectedStateActions>();
    private readonly InputAction m_EntitySelectedState_ScreenPosition;
    private readonly InputAction m_EntitySelectedState_OnSelectEntity;
    private readonly InputAction m_EntitySelectedState_OnDeselectEntity;
    public struct EntitySelectedStateActions
    {
        private @PlayerInGameController m_Wrapper;
        public EntitySelectedStateActions(@PlayerInGameController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_EntitySelectedState_ScreenPosition;
        public InputAction @OnSelectEntity => m_Wrapper.m_EntitySelectedState_OnSelectEntity;
        public InputAction @OnDeselectEntity => m_Wrapper.m_EntitySelectedState_OnDeselectEntity;
        public InputActionMap Get() { return m_Wrapper.m_EntitySelectedState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EntitySelectedStateActions set) { return set.Get(); }
        public void AddCallbacks(IEntitySelectedStateActions instance)
        {
            if (instance == null || m_Wrapper.m_EntitySelectedStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EntitySelectedStateActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
            @OnSelectEntity.started += instance.OnOnSelectEntity;
            @OnSelectEntity.performed += instance.OnOnSelectEntity;
            @OnSelectEntity.canceled += instance.OnOnSelectEntity;
            @OnDeselectEntity.started += instance.OnOnDeselectEntity;
            @OnDeselectEntity.performed += instance.OnOnDeselectEntity;
            @OnDeselectEntity.canceled += instance.OnOnDeselectEntity;
        }

        private void UnregisterCallbacks(IEntitySelectedStateActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
            @OnSelectEntity.started -= instance.OnOnSelectEntity;
            @OnSelectEntity.performed -= instance.OnOnSelectEntity;
            @OnSelectEntity.canceled -= instance.OnOnSelectEntity;
            @OnDeselectEntity.started -= instance.OnOnDeselectEntity;
            @OnDeselectEntity.performed -= instance.OnOnDeselectEntity;
            @OnDeselectEntity.canceled -= instance.OnOnDeselectEntity;
        }

        public void RemoveCallbacks(IEntitySelectedStateActions instance)
        {
            if (m_Wrapper.m_EntitySelectedStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEntitySelectedStateActions instance)
        {
            foreach (var item in m_Wrapper.m_EntitySelectedStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EntitySelectedStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EntitySelectedStateActions @EntitySelectedState => new EntitySelectedStateActions(this);
    public interface IBasicStateActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnOnSelectEntity(InputAction.CallbackContext context);
    }
    public interface IEntitySelectedStateActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnOnSelectEntity(InputAction.CallbackContext context);
        void OnOnDeselectEntity(InputAction.CallbackContext context);
    }
}
